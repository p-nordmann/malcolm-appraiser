# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import malcolms_service_pb2 as malcolms__service__pb2


class MalcolmSamplerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddBoundaries = channel.unary_unary(
            "/grpc.MalcolmSampler/AddBoundaries",
            request_serializer=malcolms__service__pb2.Boundaries.SerializeToString,
            response_deserializer=malcolms__service__pb2.BoundariesUUID.FromString,
        )
        self.AddPosterior = channel.stream_unary(
            "/grpc.MalcolmSampler/AddPosterior",
            request_serializer=malcolms__service__pb2.PosteriorValuesBatch.SerializeToString,
            response_deserializer=malcolms__service__pb2.PosteriorUUID.FromString,
        )
        self.MakeSamples = channel.unary_stream(
            "/grpc.MalcolmSampler/MakeSamples",
            request_serializer=malcolms__service__pb2.MakeSamplesRequest.SerializeToString,
            response_deserializer=malcolms__service__pb2.SamplesBatch.FromString,
        )


class MalcolmSamplerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddBoundaries(self, request, context):
        """AddBoundaries registers boundaries of a parameter space.

        It returns the UUID to refer to these boundaries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddPosterior(self, request_iterator, context):
        """AddPosterior registers posterior values sampled from the true posterior.

        The sampling problem starts recording when the first sample is streamed.
        It finishes when the stream is closed and an identification token is returned.

        This rpc expects samples in batches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MakeSamples(self, request, context):
        """MakeSamples samples the requested number of points.

        Streams the generated points.

        Whether samples are batched in responses is implementation-specific.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MalcolmSamplerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "AddBoundaries": grpc.unary_unary_rpc_method_handler(
            servicer.AddBoundaries,
            request_deserializer=malcolms__service__pb2.Boundaries.FromString,
            response_serializer=malcolms__service__pb2.BoundariesUUID.SerializeToString,
        ),
        "AddPosterior": grpc.stream_unary_rpc_method_handler(
            servicer.AddPosterior,
            request_deserializer=malcolms__service__pb2.PosteriorValuesBatch.FromString,
            response_serializer=malcolms__service__pb2.PosteriorUUID.SerializeToString,
        ),
        "MakeSamples": grpc.unary_stream_rpc_method_handler(
            servicer.MakeSamples,
            request_deserializer=malcolms__service__pb2.MakeSamplesRequest.FromString,
            response_serializer=malcolms__service__pb2.SamplesBatch.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "grpc.MalcolmSampler", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class MalcolmSampler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddBoundaries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/grpc.MalcolmSampler/AddBoundaries",
            malcolms__service__pb2.Boundaries.SerializeToString,
            malcolms__service__pb2.BoundariesUUID.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddPosterior(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/grpc.MalcolmSampler/AddPosterior",
            malcolms__service__pb2.PosteriorValuesBatch.SerializeToString,
            malcolms__service__pb2.PosteriorUUID.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MakeSamples(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/grpc.MalcolmSampler/MakeSamples",
            malcolms__service__pb2.MakeSamplesRequest.SerializeToString,
            malcolms__service__pb2.SamplesBatch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
