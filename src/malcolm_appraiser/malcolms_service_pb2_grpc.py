# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import malcolms_service_pb2 as malcolms__service__pb2


class AppraiserStub(object):
    """TODO(p-nordmann): rename service and messages."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutBoundaries = channel.unary_unary(
            "/grpc.Appraiser/PutBoundaries",
            request_serializer=malcolms__service__pb2.Boundaries.SerializeToString,
            response_deserializer=malcolms__service__pb2.UUID.FromString,
        )
        self.RegisterTrueSamples = channel.stream_unary(
            "/grpc.Appraiser/RegisterTrueSamples",
            request_serializer=malcolms__service__pb2.TrueSamples.SerializeToString,
            response_deserializer=malcolms__service__pb2.UUID.FromString,
        )
        self.Walk = channel.unary_stream(
            "/grpc.Appraiser/Walk",
            request_serializer=malcolms__service__pb2.WalkRequest.SerializeToString,
            response_deserializer=malcolms__service__pb2.Samples.FromString,
        )


class AppraiserServicer(object):
    """TODO(p-nordmann): rename service and messages."""

    def PutBoundaries(self, request, context):
        """PutBoundaries registers boundaries that problems can be made of.
        It returns an UUID that will be required by the rpc RegisterTrueSamples.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterTrueSamples(self, request_iterator, context):
        """RegisterTrueSamples registers posterior values sampled from the true posterior.
        The sampling problem starts recording when the first sample is streamed.
        It finishes when the stream is closed and an identification token is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Walk(self, request, context):
        """WalkFrom requests to perform one walk from a requested point for a requested number of steps.

        Returns the generated points.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AppraiserServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "PutBoundaries": grpc.unary_unary_rpc_method_handler(
            servicer.PutBoundaries,
            request_deserializer=malcolms__service__pb2.Boundaries.FromString,
            response_serializer=malcolms__service__pb2.UUID.SerializeToString,
        ),
        "RegisterTrueSamples": grpc.stream_unary_rpc_method_handler(
            servicer.RegisterTrueSamples,
            request_deserializer=malcolms__service__pb2.TrueSamples.FromString,
            response_serializer=malcolms__service__pb2.UUID.SerializeToString,
        ),
        "Walk": grpc.unary_stream_rpc_method_handler(
            servicer.Walk,
            request_deserializer=malcolms__service__pb2.WalkRequest.FromString,
            response_serializer=malcolms__service__pb2.Samples.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "grpc.Appraiser", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Appraiser(object):
    """TODO(p-nordmann): rename service and messages."""

    @staticmethod
    def PutBoundaries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/grpc.Appraiser/PutBoundaries",
            malcolms__service__pb2.Boundaries.SerializeToString,
            malcolms__service__pb2.UUID.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterTrueSamples(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/grpc.Appraiser/RegisterTrueSamples",
            malcolms__service__pb2.TrueSamples.SerializeToString,
            malcolms__service__pb2.UUID.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Walk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/grpc.Appraiser/Walk",
            malcolms__service__pb2.WalkRequest.SerializeToString,
            malcolms__service__pb2.Samples.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
